---
title: PRJNA312948 Analysis
format: html
author: Gennaro Calendo
---

Import and prepare counts and sample metadata

## Set up

```{r}
suppressPackageStartupMessages(library(coriell))
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(patchwork))
suppressPackageStartupMessages(library(SummarizedExperiment))
suppressPackageStartupMessages(library(edgeR))

datafiles <- here("results", "PRJNA312948", "data-files", "01")
figures <- here("results", "PRJNA312948", "figures", "01")
rdsfiles <- here("results", "PRJNA312948", "rds-files", "01")

invisible(sapply(c(datafiles, figures, rdsfiles), dir.create, showWarnings=F, recursive=T))
```

## Read in `rmskProfiler` counts

rowRanges can be dropped to save space

```{r}
se <- readRDS(here("data", "PRJNA312948", "03_rmskProfiler", "se.rds"))
rowData(se)$Ranges <- NULL
```

## Read in metadata and align with SE

```{r}
metadata <- fread(here("doc", "PRJNA312948_SraRunTable.csv"))
metadata <- janitor::clean_names(metadata)
```

Clean the remaining metadata columns. "stranded_unstranded_rnaseq" will have to be treated as a 
batch effect to correct log normalized counts with. Recode response status based on 
[RECIST](https://en.wikipedia.org/wiki/Response_evaluation_criteria_in_solid_tumors) codes:

 - Complete response (CR): Disappearance of all target lesions
 - Partial response (PR): At least a 30% decrease in the sum of the LD of target lesions, taking as reference the baseline sum LD
 - Stable disease (SD): Neither sufficient shrinkage to qualify for PR nor sufficient increase to qualify for PD taking as reference the smallest sum LD since the treatment started
 - Progressive disease (PD): At least a 20% increase in the sum of the LD of target lesions, taking as reference the smallest sum LD recorded since the treatment started or the appearance of one or more new lesions

```{r}
metadata[, response := fcase(anti_pd_1_response == "Complete Response", "CR",
                             anti_pd_1_response == "Partial Response", "PR",
                             anti_pd_1_response == "Progressive Disease", "PD",
                             anti_pd_1_response == "Stable disease", "SD",
                             default = NA)]
```

Align with SE object and add as object metadata

```{r}
setDF(metadata, rownames=metadata$geo_accession_exp)
metadata <- metadata[colnames(se), ]
colData(se) <- cbind(colData(se), metadata)
```

## Remove any TEs within exons 

```{r}
# Select hash IDs in exons to drop
drop_te <- subset(rowData(se), 
  !is.na(Hash) & (hasUnstrandedExonic == TRUE | hasUnstranded3UTR == TRUE | hasUnstranded5UTR == TRUE),
  select = "Hash",
  drop = TRUE
  )

se <- se[!rownames(se) %chin% drop_te, ]
```

## Drop single duplicated sample

```{r}
se <- se[, se$biopsy_time != "on-treatment"]
```

## `edgeR` pipeline

### Filter for expression

```{r}
y <- SE2DGEList(se)
y$samples$group <- y$samples$response

keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
```

### Compute TMM scaling factors

```{r}
y <- normLibSizes(y)
```

Show the MDS plot of the normalized counts. There is a batch effect by the stranded sv unstranded 
protocols.

```{r}
png(here(figures, "mds.png"), width=6, height=5, units="in", res=300)
plotMDS(y, col=factor(y$samples$stranded_unstranded_rnaseq), pch=19, main="By Batch")
legend("topright", legend=c("stranded", "unstranded"), col=palette()[1:2], pch=19)
dev.off()
```

Use limma to regress away the known batch effects.

```{r}
design0 <- model.matrix(~response, data=colData(se))
lcpm <- cpm(y, log=TRUE)
lcpm.c <- limma::removeBatchEffect(lcpm, batch=y$samples$stranded_unstranded_rnaseq, design = design0)
```

Show MDS plot on the corrected logCPMs. This addressed the batch issue. Batch is needed as a term 
in the final model. 

```{r}
png(here(figures, "mds2.png"), width=6, height=5, units="in", res=300)
plotMDS(lcpm.c, col=factor(y$samples$stranded_unstranded_rnaseq), pch=19, main="By Batch (Corrected)")
legend("topright", legend=c("stranded", "unstranded"), col=palette()[1:2], pch=19)
dev.off()
```

Do the other variables contribute to the variation? Not much on first component, at least.

```{r}
par(mfrow=c(2, 2))
plotMDS(lcpm.c, col=factor(y$samples$gender), pch=19, main="By Sex")
plotMDS(lcpm.c, col=factor(y$samples$vital_status), pch=19, main="By Vital Status")
plotMDS(lcpm.c, col=factor(y$samples$disease_status), pch=19, main="By Disease Status")
plotMDS(lcpm.c, col=factor(y$samples$response), pch=19, main="By Response")
```

Show QC plots

```{r}
coriell::plot_boxplot(lcpm.c, metadata=y$samples, fillBy="response", rle=TRUE)
ggsave(here(figures, "rle-boxplot.png"), width=9, height=6)

coriell::plot_density(lcpm.c, metadata=y$samples, colBy="response")
ggsave(here(figures, "lib-density.png"), width=9, height=6)
```

### Perform DE testing

```{r}
y$samples$group <- factor(y$samples$group, levels=c("PD", "PR", "CR"))
design <- model.matrix(~group + stranded_unstranded_rnaseq, data=y$samples)
fit <- glmQLFit(y, design=design, robust=TRUE)

pr_vs_pd <- glmQLFTest(fit, coef=2) 
cr_vs_pd <- glmQLFTest(fit, coef=3)

results <- list(
    "PR_vs_PD" = edger_to_df(pr_vs_pd),
    "CR_vs_PD" = edger_to_df(cr_vs_pd)
    )
```

Show volcano and MA plots of the DE results

```{r}
# Transcripts
v1 <- plot_volcano(subset(results[[1]], feature_id %like% "^ENST"), x_axis_limits=c(-10, 10), y_axis_limits=c(0, 4)) + 
  labs(title = "PR vs PD")
v2 <- plot_volcano(subset(results[[2]], feature_id %like% "^ENST"), x_axis_limits=c(-10, 10), y_axis_limits=c(0, 4)) + 
  labs(title = "CR vs PD")
m1 <- plot_md(subset(results[[1]], feature_id %like% "^ENST"), y_axis_limits=c(-10, 10)) + 
  labs(title = "PR vs PD")
m2 <- plot_md(subset(results[[2]], feature_id %like% "^ENST"), y_axis_limits=c(-10, 10)) + 
  labs(title = "CR vs PD")

(v1 | v2) / (m1 | m2)
ggsave(here(figures, "differential-expression_tx.png"), width=12, height=10)

# TEs
v1 <- plot_volcano(subset(results[[1]], !feature_id %like% "^ENST"), x_axis_limits=c(-10, 10), y_axis_limits=c(0, 3)) + 
  labs(title = "PR vs PD")
v2 <- plot_volcano(subset(results[[2]], !feature_id %like% "^ENST"), x_axis_limits=c(-10, 10), y_axis_limits=c(0, 3)) + 
  labs(title = "CR vs PD")
m1 <- plot_md(subset(results[[1]], !feature_id %like% "^ENST"), y_axis_limits=c(-10, 10)) + 
  labs(title = "PR vs PD")
m2 <- plot_md(subset(results[[2]], !feature_id %like% "^ENST"), y_axis_limits=c(-10, 10)) + 
  labs(title = "CR vs PD")

(v1 | v2) / (m1 | m2)
ggsave(here(figures, "differential-expression_te.png"), width=12, height=10)
```

## Save the final SE object for meta-analysis

```{r}
processed <- SummarizedExperiment(
    assays = list(counts = y$counts, logcounts = lcpm.c),
    colData = y$samples,
    rowData = y$genes,
    metadata = list(results=results, fit=fit, design=design)
)

saveRDS(processed, here(rdsfiles, "processed-se.rds"))
```
