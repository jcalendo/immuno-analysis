---
title: PRJNA753518 Analysis
format: html
author: Gennaro Calendo
---

Import and prepare counts and sample metadata

## Set up

```{r}
suppressPackageStartupMessages(library(coriell))
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(patchwork))
suppressPackageStartupMessages(library(SummarizedExperiment))
suppressPackageStartupMessages(library(edgeR))

datafiles <- here("results", "PRJNA753518", "data-files", "01")
figures <- here("results", "PRJNA753518", "figures", "01")
rdsfiles <- here("results", "PRJNA753518", "rds-files", "01")

invisible(sapply(c(datafiles, figures, rdsfiles), dir.create, showWarnings=F, recursive=T))
```

## Read in `rmskProfiler` counts

```{r}
se <- readRDS(here("data", "PRJNA753518", "03_rmskProfiler", "se.rds"))
rowData(se)$Ranges <- NULL
```

## Read in metadata and align with SE

```{r}
metadata <- fread(here("doc", "PRJNA753518_SraRunTable.csv"))
metadata <- janitor::clean_names(metadata)
metadata <- metadata[assay_type == "RNA-Seq"]
```

Collapse and align metadata to assays. 

```{r}
setDF(metadata, rownames=metadata$geo_accession_exp)
metadata <- metadata[colnames(se), ]
colData(se) <- cbind(colData(se), metadata)
```

Responder status needed to be pulled from GEO:

- GSM5512434	PD1-001-KH_RNA
- GSM5512437	PD1-003-TF2_RNA
- GSM5512440	PD1-019-WC_RNA
- GSM5512443	PD1-020-JS_RNA
- GSM5512446	PD1-027-SD_RNA
- GSM5512449	PD1-004-SS_RNA
- GSM5512452	PD1-005-ET_RNA
- GSM5512455	PD1-011-MD_RNA
- GSM5512458	PD1-017-JH_RNA
- GSM5512461	PD1-032-AR_RNA

The responder status was then listed in the supplementary table of the publication or in the 
[clinical data](https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE181815&format=file&file=GSE181815%5FClinicalData%2Exlsx) 
from GEO

## Filter for expression

```{r}
se$response <- ifelse(
    se$geo_accession_exp %chin% c("GSM5512449", "GSM5512452", "GSM5512455", "GSM5512458"), 
    yes = "R", 
    no = "NR"
    )
```

## Remove any TEs within exons 

```{r}
# Select hash IDs in exons to drop
drop_te <- subset(rowData(se), 
  !is.na(Hash) & (hasUnstrandedExonic == TRUE | hasUnstranded3UTR == TRUE | hasUnstranded5UTR == TRUE),
  select = "Hash",
  drop = TRUE
  )

se <- se[!rownames(se) %chin% drop_te, ]
```

## `edgeR` pipeline

### Filter for expression

```{r}
y <- SE2DGEList(se)
y$samples$group <- factor(y$samples$response, levels=c("NR", "R"))

keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
```

### Compute TMM scaling factors

```{r}
y <- normLibSizes(y)
```

Show the MDS plot of the normalized counts. 

```{r}
png(here(figures, "mds.png"), width=6, height=5, units="in", res=300)
plotMDS(y, col=y$samples$group, pch=19, main="By Response")
legend("top", legend=levels(y$samples$group), col=palette()[1:2], pch=19)
dev.off()
```

Show QC plots

```{r}
lcpm <- cpm(y, log=TRUE)

coriell::plot_boxplot(lcpm, metadata=y$samples, fillBy="response", rle=TRUE)
ggsave(here(figures, "rle-boxplot.png"), width=9, height=6)

coriell::plot_density(lcpm, metadata=y$samples, colBy="response")
ggsave(here(figures, "lib-density.png"), width=9, height=6)
```

### Perform DE testing

```{r}
design <- model.matrix(~group, data=y$samples)
fit <- glmQLFit(y, design=design, robust=TRUE)

# Test for differential expression
r_vs_nr <- glmQLFTest(fit, coef=2) 

# Combine all results into a list of data.frames
results <- list("responder_vs_nonresponder" = edger_to_df(r_vs_nr))
```

Show differential expression plot

```{r}
# Transcripts
v1 <- plot_volcano(subset(results[[1]], feature_id %like% "^ENST")) + 
  labs(title = "Responder vs Non-Responder")
m1 <- plot_md(subset(results[[1]], feature_id %like% "^ENST")) + 
  labs(title =  "Responder vs Non-Responder")

(v1 | m1)
ggsave(here(figures, "differential-expression_tx.png"), width=12, height=6)

# TEs
v1 <- plot_volcano(subset(results[[1]], !feature_id %like% "^ENST")) + 
  labs(title = "Responder vs Non-Responder")
m1 <- plot_md(subset(results[[1]], !feature_id %like% "^ENST")) + 
  labs(title = "Responder vs Non-Responder")

(v1 | m1)
ggsave(here(figures, "differential-expression_te.png"), width=12, height=6)
```

## Save the final SE object for meta-analysis

```{r}
processed <- SummarizedExperiment(
    assays = list(counts = y$counts, logcounts = lcpm),
    colData = y$samples,
    rowData = y$genes,
    metadata = list(results=results, fit=fit, design=design)
)

saveRDS(processed, here(rdsfiles, "processed-se.rds"))
```
