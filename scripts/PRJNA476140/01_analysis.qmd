---
title: PRJNA476140 Analysis
format: html
author: Gennaro Calendo
---

Import and prepare counts and sample metadata

## Set up

```{r}
suppressPackageStartupMessages(library(coriell))
suppressPackageStartupMessages(library(here))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(SummarizedExperiment))
suppressPackageStartupMessages(library(edgeR))

datafiles <- here("results", "PRJNA476140", "data-files", "01")
figures <- here("results", "PRJNA476140", "figures", "01")
rdsfiles <- here("results", "PRJNA476140", "rds-files", "01")

invisible(sapply(c(datafiles, figures, rdsfiles), dir.create, showWarnings=F, recursive=T))
```

## Read in `rmskProfiler` counts

```{r}
se <- readRDS(here("data", "PRJNA476140", "03_rmskProfiler", "se.rds"))
rowData(se)$Ranges <- NULL
```

## Read in metadata and align with SE

```{r}
metadata <- fread(here("doc", "PRJNA476140_SraRunTable.csv"))
metadata <- janitor::clean_names(metadata)
```

Align with SE object and add as object metadata

```{r}
setDF(metadata, rownames=metadata$geo_accession_exp)
metadata <- metadata[colnames(se), ]
colData(se) <- cbind(colData(se), metadata)
```

## Remove any TEs within exons 

```{r}
# Select hash IDs in exons to drop
drop_te <- subset(rowData(se), 
  !is.na(Hash) & (hasUnstrandedExonic == TRUE | hasUnstranded3UTR == TRUE | hasUnstranded5UTR == TRUE),
  select = "Hash",
  drop = TRUE
  )

se <- se[!rownames(se) %chin% drop_te, ]
```

## Remove single patient sample

So we can potentially fix a lme model if needed

```{r}
se <- se[, se$patient_id != "MGH Patient 148"]
```

## `edgeR/limma` pipeline

### Filter for expression

```{r}
y <- SE2DGEList(se)
y$samples$group <- y$samples$response

keep <- filterByExpr(y)
y <- y[keep,,keep.lib.sizes=FALSE]
```

### Compute TMM scaling factors

```{r}
y <- normLibSizes(y)
```

### Compute batch-effect corrected log TPMs

Show MDs plot

```{r}
png(here(figures, "mds.png"), width=6, height=5, units="in", res=300)
plotMDS(y, col=factor(y$samples$batch), pch=19, main="By Batch")
legend("top", legend=c("1", "2", "3", "4"), col=palette()[1:4], pch=19)
dev.off()
```

The largest differences by MDS seem to be between batch 1 and batches 2-4. There are only 3 
responders in this dataset so the batch correction cannot be estimated across all batch factor 
levels. I think combining batches into 1 and 2-4 might work. 

```{r}
lcpm <- cpm(y, log=TRUE)

y$samples$batch2 <- ifelse(y$samples$batch == 1, "1", "234")
design0 <- model.matrix(~patient_id + treatment_state + timepoint, data = y$samples)
lcpm.c <- limma::removeBatchEffect(lcpm, batch=y$samples$batch2, design=design0)
```

Show MDS after batch adjustment. This removes the apparent batch effect but does not account for 
the repeated measures design of the experiment. 

```{r}
png(here(figures, "mds2.png"), width=6, height=5, units="in", res=300)
plotMDS(lcpm.c, col=factor(y$samples$batch), pch=19, main="By Batch (Corrected)")
legend("top", legend=c("1", "2", "3", "4"), col=palette()[1:4], pch=19)
dev.off()
```

### fit model with limma::voom()

We need to work in the repeated measures design. This can be accomplished with 
`limma::duplicateCorrelation()`

```{r}
design <- model.matrix(~response + timepoint + batch2, data = y$samples)
v <- voom(y, design)

# Estimate the correlation between patients sampled more than once
cor <- duplicateCorrelation(v, design, block = y$samples$patient_id)

# Update the quality weights and new correlation structure
v <- voom(y, design, plot = TRUE, block = y$samples$patient_id, correlation = cor$consensus.correlation)
cor <- duplicateCorrelation(v, design, block = y$samples$patient_id)

# Fit the model
fit <- lmFit(v, design, block = y$samples$patient_id, correlation = cor$consensus.correlation)
fit2 <- eBayes(fit, trend=TRUE, robust=TRUE)

# Test for differential expression
results <- topTable(fit2, coef=2, number=Inf, sort="none")
```

## Save the final SE object for meta-analysis

```{r}
processed <- SummarizedExperiment(
    assays = list(counts = y$counts, logcounts = lcpm.c),
    colData = y$samples,
    rowData = y$genes,
    metadata = list(results=results, fit=fit2, design=design, dupcor=cor)
)

saveRDS(processed, here(rdsfiles, "processed-se.rds"))
```
